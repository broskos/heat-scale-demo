heat_template_version: 2014-10-16


description: >
  Deploy a head server and a scalable number of HPC worker nodes


parameters:

  # Access to the VMs
  ssh_user:
    type: string
    description: >
      The SSH user available on all nodes.
    default: 'cloud-user'

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  # VM characteristics
  server_image:
    type: string
    description: Name or ID of the host image registered with Glance
    constraints:
    - custom_constraint: glance.image

  flavor:
    type: string
    description: The Nova flavor to use for the nodes
    default: m1.medium
    constraints:
    - custom_constraint: nova.flavor

  timeout:
    description: Time to wait until the setup is ready.
    type: number
    default: 600

  # Networks to connect to or create
  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    constraints:
    - custom_constraint: neutron.network

  internal_subnet:
    type: string
    description: >
      The subnet used for node-node and node-master communication
    default: 192.168.0.0/24

  dns_nameserver:
    type: comma_delimited_list
    description: address of a dns nameserver reachable in your environment
    default: 8.8.8.8

  head_hostname:
    type: string
    description: >
      The hostname that is going to be set for the dedicated head node.
    default: 'head'

  worker_node_hostname:
    type: string
    description: >
      The hostname that is going to be set for the worker nodes.
    default: "node"


  # Node scaling parameters
  autoscaling:
    type: boolean
    description: >
      Automatically scale up/down worker nodes.
    default: true


  worker_node_count:
    type: number
    description: >
      Number of worker nodes to create.
    default: 3

  worker_nodes_min:
    type: number
    description: >
      Minimum number of worker nodes if autoscaling is enabled.
    default: 1

  worker_nodes_max:
    type: number
    description: >
      Maximum number of worker nodes if autoscaling is enabled.
    default: 10

  # Internal and Auxiliary Services


  # Red Hat subscription parameters
  rhn_username:
    type: string
    description: >
      The username for registering the hosts with RHN. If empty, they will not
      be registered.
    default: ''

  rhn_password:
    type: string
    description: >
      The password for registering the hosts with RHN. If empty, they will not
      be registered.
    hidden: true
    default: ''

  rhn_pool:
    type: string
    description: >
      The pool to attach. Will use `subscription-manager attach --auto` if left
      blank.
    hidden: true


resources:

  # Network Components
  fixed_network:
    type: OS::Neutron::Net

  fixed_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: {get_param: internal_subnet}
      network: {get_resource: fixed_network}
      dns_nameservers: {get_param: dns_nameserver}

  external_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  external_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: external_router}
      subnet: {get_resource: fixed_subnet}

  # VM Host definitions
  head_node:
    depends_on: external_router_interface
    type: head.yaml
    properties:
      image: {get_param: server_image}
      flavor: {get_param: flavor}
      key_name: {get_param: ssh_key_name}
      ssh_user: {get_param: ssh_user}
      rhn_username: {get_param: rhn_username}
      rhn_password: {get_param: rhn_password}
      rhn_pool: {get_param: rhn_pool}
      timeout: {get_param: timeout}
      hostname:
        str_replace:
          template: "%stackname%-%hostname%"
          params:
            '%stackname%': {get_param: 'OS::stack_name'}
            '%hostname%': {get_param: head_hostname}
      port: {get_resource: head_port}


  worker_nodes:
    depends_on: external_router_interface
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: {get_param: worker_node_count}
      min_size: {get_param: worker_nodes_min}
      max_size: {get_param: worker_nodes_max}
      resource:
        type: worker.yaml
        properties:
          image: {get_param: server_image}
          flavor: {get_param: flavor}
          key_name: {get_param: ssh_key_name}
          ssh_user: {get_param: ssh_user}
          fixed_network: {get_resource: fixed_network}
          fixed_subnet: {get_resource: fixed_subnet}
          rhn_username: {get_param: rhn_username}
          rhn_password: {get_param: rhn_password}
          rhn_pool: {get_param: rhn_pool}
          timeout: {get_param: timeout}
          hostname:
            str_replace:
              template: "%stackname%-%hostname%"
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
                '%hostname%': {get_param: worker_node_hostname}

  # Scaling and Operational Controls
  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: worker_nodes}
      cooldown: 60
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: worker_nodes}
      cooldown: 60
      scaling_adjustment: '-1'


  head_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_resource: head_security_group}
      network: {get_resource: fixed_network}
      fixed_ips:
      - subnet: {get_resource: fixed_subnet}
      replacement_policy: AUTO

  head_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22


  head_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: head_port}


outputs:
  head_ip:
    description: IP address of the head server
    value: {get_attr: [head_floating_ip, floating_ip_address]}

  worker_ips:
    description: IP addresses of the worker nodes
    value: {get_attr: [worker_nodes, outputs_list, ip_address]}

  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [scale_up_policy, alarm_url]}

  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [scale_down_policy, alarm_url]}
